// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: bank/v1/business.proto

package bankv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BusinessService_CreateBusinessWallet_FullMethodName = "/bank.v1.BusinessService/CreateBusinessWallet"
	BusinessService_GetBusinessWallet_FullMethodName    = "/bank.v1.BusinessService/GetBusinessWallet"
	BusinessService_UpdateBusinessWallet_FullMethodName = "/bank.v1.BusinessService/UpdateBusinessWallet"
	BusinessService_SetPayoutSchedule_FullMethodName    = "/bank.v1.BusinessService/SetPayoutSchedule"
	BusinessService_RequestPayout_FullMethodName        = "/bank.v1.BusinessService/RequestPayout"
	BusinessService_GetBusinessStats_FullMethodName     = "/bank.v1.BusinessService/GetBusinessStats"
)

// BusinessServiceClient is the client API for BusinessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusinessServiceClient interface {
	CreateBusinessWallet(ctx context.Context, in *CreateBusinessWalletRequest, opts ...grpc.CallOption) (*CreateBusinessWalletResponse, error)
	GetBusinessWallet(ctx context.Context, in *GetBusinessWalletRequest, opts ...grpc.CallOption) (*GetBusinessWalletResponse, error)
	UpdateBusinessWallet(ctx context.Context, in *UpdateBusinessWalletRequest, opts ...grpc.CallOption) (*UpdateBusinessWalletResponse, error)
	SetPayoutSchedule(ctx context.Context, in *SetPayoutScheduleRequest, opts ...grpc.CallOption) (*SetPayoutScheduleResponse, error)
	RequestPayout(ctx context.Context, in *RequestPayoutRequest, opts ...grpc.CallOption) (*RequestPayoutResponse, error)
	GetBusinessStats(ctx context.Context, in *GetBusinessStatsRequest, opts ...grpc.CallOption) (*GetBusinessStatsResponse, error)
}

type businessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessServiceClient(cc grpc.ClientConnInterface) BusinessServiceClient {
	return &businessServiceClient{cc}
}

func (c *businessServiceClient) CreateBusinessWallet(ctx context.Context, in *CreateBusinessWalletRequest, opts ...grpc.CallOption) (*CreateBusinessWalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBusinessWalletResponse)
	err := c.cc.Invoke(ctx, BusinessService_CreateBusinessWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) GetBusinessWallet(ctx context.Context, in *GetBusinessWalletRequest, opts ...grpc.CallOption) (*GetBusinessWalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBusinessWalletResponse)
	err := c.cc.Invoke(ctx, BusinessService_GetBusinessWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) UpdateBusinessWallet(ctx context.Context, in *UpdateBusinessWalletRequest, opts ...grpc.CallOption) (*UpdateBusinessWalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBusinessWalletResponse)
	err := c.cc.Invoke(ctx, BusinessService_UpdateBusinessWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) SetPayoutSchedule(ctx context.Context, in *SetPayoutScheduleRequest, opts ...grpc.CallOption) (*SetPayoutScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetPayoutScheduleResponse)
	err := c.cc.Invoke(ctx, BusinessService_SetPayoutSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) RequestPayout(ctx context.Context, in *RequestPayoutRequest, opts ...grpc.CallOption) (*RequestPayoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestPayoutResponse)
	err := c.cc.Invoke(ctx, BusinessService_RequestPayout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) GetBusinessStats(ctx context.Context, in *GetBusinessStatsRequest, opts ...grpc.CallOption) (*GetBusinessStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBusinessStatsResponse)
	err := c.cc.Invoke(ctx, BusinessService_GetBusinessStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessServiceServer is the server API for BusinessService service.
// All implementations must embed UnimplementedBusinessServiceServer
// for forward compatibility.
type BusinessServiceServer interface {
	CreateBusinessWallet(context.Context, *CreateBusinessWalletRequest) (*CreateBusinessWalletResponse, error)
	GetBusinessWallet(context.Context, *GetBusinessWalletRequest) (*GetBusinessWalletResponse, error)
	UpdateBusinessWallet(context.Context, *UpdateBusinessWalletRequest) (*UpdateBusinessWalletResponse, error)
	SetPayoutSchedule(context.Context, *SetPayoutScheduleRequest) (*SetPayoutScheduleResponse, error)
	RequestPayout(context.Context, *RequestPayoutRequest) (*RequestPayoutResponse, error)
	GetBusinessStats(context.Context, *GetBusinessStatsRequest) (*GetBusinessStatsResponse, error)
	mustEmbedUnimplementedBusinessServiceServer()
}

// UnimplementedBusinessServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBusinessServiceServer struct{}

func (UnimplementedBusinessServiceServer) CreateBusinessWallet(context.Context, *CreateBusinessWalletRequest) (*CreateBusinessWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessWallet not implemented")
}
func (UnimplementedBusinessServiceServer) GetBusinessWallet(context.Context, *GetBusinessWalletRequest) (*GetBusinessWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessWallet not implemented")
}
func (UnimplementedBusinessServiceServer) UpdateBusinessWallet(context.Context, *UpdateBusinessWalletRequest) (*UpdateBusinessWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessWallet not implemented")
}
func (UnimplementedBusinessServiceServer) SetPayoutSchedule(context.Context, *SetPayoutScheduleRequest) (*SetPayoutScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPayoutSchedule not implemented")
}
func (UnimplementedBusinessServiceServer) RequestPayout(context.Context, *RequestPayoutRequest) (*RequestPayoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPayout not implemented")
}
func (UnimplementedBusinessServiceServer) GetBusinessStats(context.Context, *GetBusinessStatsRequest) (*GetBusinessStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessStats not implemented")
}
func (UnimplementedBusinessServiceServer) mustEmbedUnimplementedBusinessServiceServer() {}
func (UnimplementedBusinessServiceServer) testEmbeddedByValue()                         {}

// UnsafeBusinessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessServiceServer will
// result in compilation errors.
type UnsafeBusinessServiceServer interface {
	mustEmbedUnimplementedBusinessServiceServer()
}

func RegisterBusinessServiceServer(s grpc.ServiceRegistrar, srv BusinessServiceServer) {
	// If the following call pancis, it indicates UnimplementedBusinessServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BusinessService_ServiceDesc, srv)
}

func _BusinessService_CreateBusinessWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).CreateBusinessWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessService_CreateBusinessWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).CreateBusinessWallet(ctx, req.(*CreateBusinessWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_GetBusinessWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).GetBusinessWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessService_GetBusinessWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).GetBusinessWallet(ctx, req.(*GetBusinessWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_UpdateBusinessWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).UpdateBusinessWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessService_UpdateBusinessWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).UpdateBusinessWallet(ctx, req.(*UpdateBusinessWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_SetPayoutSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPayoutScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).SetPayoutSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessService_SetPayoutSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).SetPayoutSchedule(ctx, req.(*SetPayoutScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_RequestPayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).RequestPayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessService_RequestPayout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).RequestPayout(ctx, req.(*RequestPayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_GetBusinessStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).GetBusinessStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessService_GetBusinessStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).GetBusinessStats(ctx, req.(*GetBusinessStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BusinessService_ServiceDesc is the grpc.ServiceDesc for BusinessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BusinessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bank.v1.BusinessService",
	HandlerType: (*BusinessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBusinessWallet",
			Handler:    _BusinessService_CreateBusinessWallet_Handler,
		},
		{
			MethodName: "GetBusinessWallet",
			Handler:    _BusinessService_GetBusinessWallet_Handler,
		},
		{
			MethodName: "UpdateBusinessWallet",
			Handler:    _BusinessService_UpdateBusinessWallet_Handler,
		},
		{
			MethodName: "SetPayoutSchedule",
			Handler:    _BusinessService_SetPayoutSchedule_Handler,
		},
		{
			MethodName: "RequestPayout",
			Handler:    _BusinessService_RequestPayout_Handler,
		},
		{
			MethodName: "GetBusinessStats",
			Handler:    _BusinessService_GetBusinessStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bank/v1/business.proto",
}
