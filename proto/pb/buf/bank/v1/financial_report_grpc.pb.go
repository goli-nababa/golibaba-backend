// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: bank/v1/financial_report.proto

package bankv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FinancialReportService_GenerateDailyReport_FullMethodName   = "/bank.v1.FinancialReportService/GenerateDailyReport"
	FinancialReportService_GenerateMonthlyReport_FullMethodName = "/bank.v1.FinancialReportService/GenerateMonthlyReport"
	FinancialReportService_GenerateCustomReport_FullMethodName  = "/bank.v1.FinancialReportService/GenerateCustomReport"
	FinancialReportService_GetReportByID_FullMethodName         = "/bank.v1.FinancialReportService/GetReportByID"
	FinancialReportService_ExportReport_FullMethodName          = "/bank.v1.FinancialReportService/ExportReport"
)

// FinancialReportServiceClient is the client API for FinancialReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FinancialReportServiceClient interface {
	GenerateDailyReport(ctx context.Context, in *GenerateDailyReportRequest, opts ...grpc.CallOption) (*GenerateDailyReportResponse, error)
	GenerateMonthlyReport(ctx context.Context, in *GenerateMonthlyReportRequest, opts ...grpc.CallOption) (*GenerateMonthlyReportResponse, error)
	GenerateCustomReport(ctx context.Context, in *GenerateCustomReportRequest, opts ...grpc.CallOption) (*GenerateCustomReportResponse, error)
	GetReportByID(ctx context.Context, in *GetReportByIDRequest, opts ...grpc.CallOption) (*GetReportByIDResponse, error)
	ExportReport(ctx context.Context, in *ExportReportRequest, opts ...grpc.CallOption) (*ExportReportResponse, error)
}

type financialReportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFinancialReportServiceClient(cc grpc.ClientConnInterface) FinancialReportServiceClient {
	return &financialReportServiceClient{cc}
}

func (c *financialReportServiceClient) GenerateDailyReport(ctx context.Context, in *GenerateDailyReportRequest, opts ...grpc.CallOption) (*GenerateDailyReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateDailyReportResponse)
	err := c.cc.Invoke(ctx, FinancialReportService_GenerateDailyReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialReportServiceClient) GenerateMonthlyReport(ctx context.Context, in *GenerateMonthlyReportRequest, opts ...grpc.CallOption) (*GenerateMonthlyReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateMonthlyReportResponse)
	err := c.cc.Invoke(ctx, FinancialReportService_GenerateMonthlyReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialReportServiceClient) GenerateCustomReport(ctx context.Context, in *GenerateCustomReportRequest, opts ...grpc.CallOption) (*GenerateCustomReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateCustomReportResponse)
	err := c.cc.Invoke(ctx, FinancialReportService_GenerateCustomReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialReportServiceClient) GetReportByID(ctx context.Context, in *GetReportByIDRequest, opts ...grpc.CallOption) (*GetReportByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReportByIDResponse)
	err := c.cc.Invoke(ctx, FinancialReportService_GetReportByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialReportServiceClient) ExportReport(ctx context.Context, in *ExportReportRequest, opts ...grpc.CallOption) (*ExportReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportReportResponse)
	err := c.cc.Invoke(ctx, FinancialReportService_ExportReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FinancialReportServiceServer is the server API for FinancialReportService service.
// All implementations must embed UnimplementedFinancialReportServiceServer
// for forward compatibility.
type FinancialReportServiceServer interface {
	GenerateDailyReport(context.Context, *GenerateDailyReportRequest) (*GenerateDailyReportResponse, error)
	GenerateMonthlyReport(context.Context, *GenerateMonthlyReportRequest) (*GenerateMonthlyReportResponse, error)
	GenerateCustomReport(context.Context, *GenerateCustomReportRequest) (*GenerateCustomReportResponse, error)
	GetReportByID(context.Context, *GetReportByIDRequest) (*GetReportByIDResponse, error)
	ExportReport(context.Context, *ExportReportRequest) (*ExportReportResponse, error)
	mustEmbedUnimplementedFinancialReportServiceServer()
}

// UnimplementedFinancialReportServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFinancialReportServiceServer struct{}

func (UnimplementedFinancialReportServiceServer) GenerateDailyReport(context.Context, *GenerateDailyReportRequest) (*GenerateDailyReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateDailyReport not implemented")
}
func (UnimplementedFinancialReportServiceServer) GenerateMonthlyReport(context.Context, *GenerateMonthlyReportRequest) (*GenerateMonthlyReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateMonthlyReport not implemented")
}
func (UnimplementedFinancialReportServiceServer) GenerateCustomReport(context.Context, *GenerateCustomReportRequest) (*GenerateCustomReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCustomReport not implemented")
}
func (UnimplementedFinancialReportServiceServer) GetReportByID(context.Context, *GetReportByIDRequest) (*GetReportByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportByID not implemented")
}
func (UnimplementedFinancialReportServiceServer) ExportReport(context.Context, *ExportReportRequest) (*ExportReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportReport not implemented")
}
func (UnimplementedFinancialReportServiceServer) mustEmbedUnimplementedFinancialReportServiceServer() {
}
func (UnimplementedFinancialReportServiceServer) testEmbeddedByValue() {}

// UnsafeFinancialReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FinancialReportServiceServer will
// result in compilation errors.
type UnsafeFinancialReportServiceServer interface {
	mustEmbedUnimplementedFinancialReportServiceServer()
}

func RegisterFinancialReportServiceServer(s grpc.ServiceRegistrar, srv FinancialReportServiceServer) {
	// If the following call pancis, it indicates UnimplementedFinancialReportServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FinancialReportService_ServiceDesc, srv)
}

func _FinancialReportService_GenerateDailyReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateDailyReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialReportServiceServer).GenerateDailyReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialReportService_GenerateDailyReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialReportServiceServer).GenerateDailyReport(ctx, req.(*GenerateDailyReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialReportService_GenerateMonthlyReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateMonthlyReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialReportServiceServer).GenerateMonthlyReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialReportService_GenerateMonthlyReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialReportServiceServer).GenerateMonthlyReport(ctx, req.(*GenerateMonthlyReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialReportService_GenerateCustomReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateCustomReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialReportServiceServer).GenerateCustomReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialReportService_GenerateCustomReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialReportServiceServer).GenerateCustomReport(ctx, req.(*GenerateCustomReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialReportService_GetReportByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialReportServiceServer).GetReportByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialReportService_GetReportByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialReportServiceServer).GetReportByID(ctx, req.(*GetReportByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialReportService_ExportReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialReportServiceServer).ExportReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialReportService_ExportReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialReportServiceServer).ExportReport(ctx, req.(*ExportReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FinancialReportService_ServiceDesc is the grpc.ServiceDesc for FinancialReportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FinancialReportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bank.v1.FinancialReportService",
	HandlerType: (*FinancialReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateDailyReport",
			Handler:    _FinancialReportService_GenerateDailyReport_Handler,
		},
		{
			MethodName: "GenerateMonthlyReport",
			Handler:    _FinancialReportService_GenerateMonthlyReport_Handler,
		},
		{
			MethodName: "GenerateCustomReport",
			Handler:    _FinancialReportService_GenerateCustomReport_Handler,
		},
		{
			MethodName: "GetReportByID",
			Handler:    _FinancialReportService_GetReportByID_Handler,
		},
		{
			MethodName: "ExportReport",
			Handler:    _FinancialReportService_ExportReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bank/v1/financial_report.proto",
}
