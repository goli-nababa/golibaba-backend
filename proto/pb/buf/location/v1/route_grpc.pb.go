// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: location/v1/route.proto

package locationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RouteService_CreateRoute_FullMethodName                 = "/location.v1.RouteService/CreateRoute"
	RouteService_GetRoute_FullMethodName                    = "/location.v1.RouteService/GetRoute"
	RouteService_UpdateRoute_FullMethodName                 = "/location.v1.RouteService/UpdateRoute"
	RouteService_DeleteRoute_FullMethodName                 = "/location.v1.RouteService/DeleteRoute"
	RouteService_SearchRoutes_FullMethodName                = "/location.v1.RouteService/SearchRoutes"
	RouteService_CalculateRouteDistance_FullMethodName      = "/location.v1.RouteService/CalculateRouteDistance"
	RouteService_GetAvailableRoutes_FullMethodName          = "/location.v1.RouteService/GetAvailableRoutes"
	RouteService_ValidateRoute_FullMethodName               = "/location.v1.RouteService/ValidateRoute"
	RouteService_GetOptimalRoutes_FullMethodName            = "/location.v1.RouteService/GetOptimalRoutes"
	RouteService_ValidateRouteForTour_FullMethodName        = "/location.v1.RouteService/ValidateRouteForTour"
	RouteService_GetNearbyLocations_FullMethodName          = "/location.v1.RouteService/GetNearbyLocations"
	RouteService_CalculateDistanceToLocation_FullMethodName = "/location.v1.RouteService/CalculateDistanceToLocation"
	RouteService_GetRouteStatistics_FullMethodName          = "/location.v1.RouteService/GetRouteStatistics"
	RouteService_GetPopularRoutes_FullMethodName            = "/location.v1.RouteService/GetPopularRoutes"
)

// RouteServiceClient is the client API for RouteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteServiceClient interface {
	CreateRoute(ctx context.Context, in *CreateRouteRequest, opts ...grpc.CallOption) (*CreateRouteResponse, error)
	GetRoute(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*GetRouteResponse, error)
	UpdateRoute(ctx context.Context, in *UpdateRouteRequest, opts ...grpc.CallOption) (*UpdateRouteResponse, error)
	DeleteRoute(ctx context.Context, in *DeleteRouteRequest, opts ...grpc.CallOption) (*DeleteRouteResponse, error)
	SearchRoutes(ctx context.Context, in *SearchRoutesRequest, opts ...grpc.CallOption) (*SearchRoutesResponse, error)
	CalculateRouteDistance(ctx context.Context, in *CalculateRouteRequest, opts ...grpc.CallOption) (*CalculateRouteResponse, error)
	GetAvailableRoutes(ctx context.Context, in *GetAvailableRoutesRequest, opts ...grpc.CallOption) (*GetAvailableRoutesResponse, error)
	ValidateRoute(ctx context.Context, in *ValidateRouteRequest, opts ...grpc.CallOption) (*ValidateRouteResponse, error)
	GetOptimalRoutes(ctx context.Context, in *GetOptimalRoutesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OptimalRouteResponse], error)
	ValidateRouteForTour(ctx context.Context, in *ValidateRouteForTourRequest, opts ...grpc.CallOption) (*ValidateRouteForTourResponse, error)
	GetNearbyLocations(ctx context.Context, in *GetNearbyLocationsRequest, opts ...grpc.CallOption) (*GetNearbyLocationsResponse, error)
	CalculateDistanceToLocation(ctx context.Context, in *CalculateDistanceRequest, opts ...grpc.CallOption) (*CalculateDistanceResponse, error)
	GetRouteStatistics(ctx context.Context, in *GetRouteStatisticsRequest, opts ...grpc.CallOption) (*GetRouteStatisticsResponse, error)
	GetPopularRoutes(ctx context.Context, in *GetPopularRoutesRequest, opts ...grpc.CallOption) (*GetPopularRoutesResponse, error)
}

type routeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteServiceClient(cc grpc.ClientConnInterface) RouteServiceClient {
	return &routeServiceClient{cc}
}

func (c *routeServiceClient) CreateRoute(ctx context.Context, in *CreateRouteRequest, opts ...grpc.CallOption) (*CreateRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRouteResponse)
	err := c.cc.Invoke(ctx, RouteService_CreateRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeServiceClient) GetRoute(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*GetRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRouteResponse)
	err := c.cc.Invoke(ctx, RouteService_GetRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeServiceClient) UpdateRoute(ctx context.Context, in *UpdateRouteRequest, opts ...grpc.CallOption) (*UpdateRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRouteResponse)
	err := c.cc.Invoke(ctx, RouteService_UpdateRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeServiceClient) DeleteRoute(ctx context.Context, in *DeleteRouteRequest, opts ...grpc.CallOption) (*DeleteRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRouteResponse)
	err := c.cc.Invoke(ctx, RouteService_DeleteRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeServiceClient) SearchRoutes(ctx context.Context, in *SearchRoutesRequest, opts ...grpc.CallOption) (*SearchRoutesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchRoutesResponse)
	err := c.cc.Invoke(ctx, RouteService_SearchRoutes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeServiceClient) CalculateRouteDistance(ctx context.Context, in *CalculateRouteRequest, opts ...grpc.CallOption) (*CalculateRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateRouteResponse)
	err := c.cc.Invoke(ctx, RouteService_CalculateRouteDistance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeServiceClient) GetAvailableRoutes(ctx context.Context, in *GetAvailableRoutesRequest, opts ...grpc.CallOption) (*GetAvailableRoutesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAvailableRoutesResponse)
	err := c.cc.Invoke(ctx, RouteService_GetAvailableRoutes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeServiceClient) ValidateRoute(ctx context.Context, in *ValidateRouteRequest, opts ...grpc.CallOption) (*ValidateRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateRouteResponse)
	err := c.cc.Invoke(ctx, RouteService_ValidateRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeServiceClient) GetOptimalRoutes(ctx context.Context, in *GetOptimalRoutesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OptimalRouteResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RouteService_ServiceDesc.Streams[0], RouteService_GetOptimalRoutes_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetOptimalRoutesRequest, OptimalRouteResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RouteService_GetOptimalRoutesClient = grpc.ServerStreamingClient[OptimalRouteResponse]

func (c *routeServiceClient) ValidateRouteForTour(ctx context.Context, in *ValidateRouteForTourRequest, opts ...grpc.CallOption) (*ValidateRouteForTourResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateRouteForTourResponse)
	err := c.cc.Invoke(ctx, RouteService_ValidateRouteForTour_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeServiceClient) GetNearbyLocations(ctx context.Context, in *GetNearbyLocationsRequest, opts ...grpc.CallOption) (*GetNearbyLocationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNearbyLocationsResponse)
	err := c.cc.Invoke(ctx, RouteService_GetNearbyLocations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeServiceClient) CalculateDistanceToLocation(ctx context.Context, in *CalculateDistanceRequest, opts ...grpc.CallOption) (*CalculateDistanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateDistanceResponse)
	err := c.cc.Invoke(ctx, RouteService_CalculateDistanceToLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeServiceClient) GetRouteStatistics(ctx context.Context, in *GetRouteStatisticsRequest, opts ...grpc.CallOption) (*GetRouteStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRouteStatisticsResponse)
	err := c.cc.Invoke(ctx, RouteService_GetRouteStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeServiceClient) GetPopularRoutes(ctx context.Context, in *GetPopularRoutesRequest, opts ...grpc.CallOption) (*GetPopularRoutesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPopularRoutesResponse)
	err := c.cc.Invoke(ctx, RouteService_GetPopularRoutes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouteServiceServer is the server API for RouteService service.
// All implementations must embed UnimplementedRouteServiceServer
// for forward compatibility.
type RouteServiceServer interface {
	CreateRoute(context.Context, *CreateRouteRequest) (*CreateRouteResponse, error)
	GetRoute(context.Context, *GetRouteRequest) (*GetRouteResponse, error)
	UpdateRoute(context.Context, *UpdateRouteRequest) (*UpdateRouteResponse, error)
	DeleteRoute(context.Context, *DeleteRouteRequest) (*DeleteRouteResponse, error)
	SearchRoutes(context.Context, *SearchRoutesRequest) (*SearchRoutesResponse, error)
	CalculateRouteDistance(context.Context, *CalculateRouteRequest) (*CalculateRouteResponse, error)
	GetAvailableRoutes(context.Context, *GetAvailableRoutesRequest) (*GetAvailableRoutesResponse, error)
	ValidateRoute(context.Context, *ValidateRouteRequest) (*ValidateRouteResponse, error)
	GetOptimalRoutes(*GetOptimalRoutesRequest, grpc.ServerStreamingServer[OptimalRouteResponse]) error
	ValidateRouteForTour(context.Context, *ValidateRouteForTourRequest) (*ValidateRouteForTourResponse, error)
	GetNearbyLocations(context.Context, *GetNearbyLocationsRequest) (*GetNearbyLocationsResponse, error)
	CalculateDistanceToLocation(context.Context, *CalculateDistanceRequest) (*CalculateDistanceResponse, error)
	GetRouteStatistics(context.Context, *GetRouteStatisticsRequest) (*GetRouteStatisticsResponse, error)
	GetPopularRoutes(context.Context, *GetPopularRoutesRequest) (*GetPopularRoutesResponse, error)
	mustEmbedUnimplementedRouteServiceServer()
}

// UnimplementedRouteServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRouteServiceServer struct{}

func (UnimplementedRouteServiceServer) CreateRoute(context.Context, *CreateRouteRequest) (*CreateRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoute not implemented")
}
func (UnimplementedRouteServiceServer) GetRoute(context.Context, *GetRouteRequest) (*GetRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoute not implemented")
}
func (UnimplementedRouteServiceServer) UpdateRoute(context.Context, *UpdateRouteRequest) (*UpdateRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoute not implemented")
}
func (UnimplementedRouteServiceServer) DeleteRoute(context.Context, *DeleteRouteRequest) (*DeleteRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoute not implemented")
}
func (UnimplementedRouteServiceServer) SearchRoutes(context.Context, *SearchRoutesRequest) (*SearchRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRoutes not implemented")
}
func (UnimplementedRouteServiceServer) CalculateRouteDistance(context.Context, *CalculateRouteRequest) (*CalculateRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateRouteDistance not implemented")
}
func (UnimplementedRouteServiceServer) GetAvailableRoutes(context.Context, *GetAvailableRoutesRequest) (*GetAvailableRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableRoutes not implemented")
}
func (UnimplementedRouteServiceServer) ValidateRoute(context.Context, *ValidateRouteRequest) (*ValidateRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateRoute not implemented")
}
func (UnimplementedRouteServiceServer) GetOptimalRoutes(*GetOptimalRoutesRequest, grpc.ServerStreamingServer[OptimalRouteResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetOptimalRoutes not implemented")
}
func (UnimplementedRouteServiceServer) ValidateRouteForTour(context.Context, *ValidateRouteForTourRequest) (*ValidateRouteForTourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateRouteForTour not implemented")
}
func (UnimplementedRouteServiceServer) GetNearbyLocations(context.Context, *GetNearbyLocationsRequest) (*GetNearbyLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNearbyLocations not implemented")
}
func (UnimplementedRouteServiceServer) CalculateDistanceToLocation(context.Context, *CalculateDistanceRequest) (*CalculateDistanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateDistanceToLocation not implemented")
}
func (UnimplementedRouteServiceServer) GetRouteStatistics(context.Context, *GetRouteStatisticsRequest) (*GetRouteStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteStatistics not implemented")
}
func (UnimplementedRouteServiceServer) GetPopularRoutes(context.Context, *GetPopularRoutesRequest) (*GetPopularRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPopularRoutes not implemented")
}
func (UnimplementedRouteServiceServer) mustEmbedUnimplementedRouteServiceServer() {}
func (UnimplementedRouteServiceServer) testEmbeddedByValue()                      {}

// UnsafeRouteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteServiceServer will
// result in compilation errors.
type UnsafeRouteServiceServer interface {
	mustEmbedUnimplementedRouteServiceServer()
}

func RegisterRouteServiceServer(s grpc.ServiceRegistrar, srv RouteServiceServer) {
	// If the following call pancis, it indicates UnimplementedRouteServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RouteService_ServiceDesc, srv)
}

func _RouteService_CreateRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).CreateRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteService_CreateRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).CreateRoute(ctx, req.(*CreateRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteService_GetRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).GetRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteService_GetRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).GetRoute(ctx, req.(*GetRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteService_UpdateRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).UpdateRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteService_UpdateRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).UpdateRoute(ctx, req.(*UpdateRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteService_DeleteRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).DeleteRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteService_DeleteRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).DeleteRoute(ctx, req.(*DeleteRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteService_SearchRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).SearchRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteService_SearchRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).SearchRoutes(ctx, req.(*SearchRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteService_CalculateRouteDistance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).CalculateRouteDistance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteService_CalculateRouteDistance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).CalculateRouteDistance(ctx, req.(*CalculateRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteService_GetAvailableRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).GetAvailableRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteService_GetAvailableRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).GetAvailableRoutes(ctx, req.(*GetAvailableRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteService_ValidateRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).ValidateRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteService_ValidateRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).ValidateRoute(ctx, req.(*ValidateRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteService_GetOptimalRoutes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetOptimalRoutesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouteServiceServer).GetOptimalRoutes(m, &grpc.GenericServerStream[GetOptimalRoutesRequest, OptimalRouteResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RouteService_GetOptimalRoutesServer = grpc.ServerStreamingServer[OptimalRouteResponse]

func _RouteService_ValidateRouteForTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRouteForTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).ValidateRouteForTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteService_ValidateRouteForTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).ValidateRouteForTour(ctx, req.(*ValidateRouteForTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteService_GetNearbyLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNearbyLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).GetNearbyLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteService_GetNearbyLocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).GetNearbyLocations(ctx, req.(*GetNearbyLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteService_CalculateDistanceToLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateDistanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).CalculateDistanceToLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteService_CalculateDistanceToLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).CalculateDistanceToLocation(ctx, req.(*CalculateDistanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteService_GetRouteStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).GetRouteStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteService_GetRouteStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).GetRouteStatistics(ctx, req.(*GetRouteStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteService_GetPopularRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPopularRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).GetPopularRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteService_GetPopularRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).GetPopularRoutes(ctx, req.(*GetPopularRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RouteService_ServiceDesc is the grpc.ServiceDesc for RouteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "location.v1.RouteService",
	HandlerType: (*RouteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoute",
			Handler:    _RouteService_CreateRoute_Handler,
		},
		{
			MethodName: "GetRoute",
			Handler:    _RouteService_GetRoute_Handler,
		},
		{
			MethodName: "UpdateRoute",
			Handler:    _RouteService_UpdateRoute_Handler,
		},
		{
			MethodName: "DeleteRoute",
			Handler:    _RouteService_DeleteRoute_Handler,
		},
		{
			MethodName: "SearchRoutes",
			Handler:    _RouteService_SearchRoutes_Handler,
		},
		{
			MethodName: "CalculateRouteDistance",
			Handler:    _RouteService_CalculateRouteDistance_Handler,
		},
		{
			MethodName: "GetAvailableRoutes",
			Handler:    _RouteService_GetAvailableRoutes_Handler,
		},
		{
			MethodName: "ValidateRoute",
			Handler:    _RouteService_ValidateRoute_Handler,
		},
		{
			MethodName: "ValidateRouteForTour",
			Handler:    _RouteService_ValidateRouteForTour_Handler,
		},
		{
			MethodName: "GetNearbyLocations",
			Handler:    _RouteService_GetNearbyLocations_Handler,
		},
		{
			MethodName: "CalculateDistanceToLocation",
			Handler:    _RouteService_CalculateDistanceToLocation_Handler,
		},
		{
			MethodName: "GetRouteStatistics",
			Handler:    _RouteService_GetRouteStatistics_Handler,
		},
		{
			MethodName: "GetPopularRoutes",
			Handler:    _RouteService_GetPopularRoutes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetOptimalRoutes",
			Handler:       _RouteService_GetOptimalRoutes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "location/v1/route.proto",
}
