// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: bank/v1/analytics.proto

package bankv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AnalyticsService_TrackTransaction_FullMethodName       = "/bank.v1.AnalyticsService/TrackTransaction"
	AnalyticsService_GenerateBusinessReport_FullMethodName = "/bank.v1.AnalyticsService/GenerateBusinessReport"
	AnalyticsService_GenerateBusinessStats_FullMethodName  = "/bank.v1.AnalyticsService/GenerateBusinessStats"
	AnalyticsService_GetCommissionHistory_FullMethodName   = "/bank.v1.AnalyticsService/GetCommissionHistory"
	AnalyticsService_GetPayoutHistory_FullMethodName       = "/bank.v1.AnalyticsService/GetPayoutHistory"
)

// AnalyticsServiceClient is the client API for AnalyticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyticsServiceClient interface {
	TrackTransaction(ctx context.Context, in *TrackTransactionRequest, opts ...grpc.CallOption) (*TrackTransactionResponse, error)
	GenerateBusinessReport(ctx context.Context, in *GenerateBusinessReportRequest, opts ...grpc.CallOption) (*GenerateBusinessReportResponse, error)
	GenerateBusinessStats(ctx context.Context, in *GenerateBusinessStatsRequest, opts ...grpc.CallOption) (*GenerateBusinessStatsResponse, error)
	GetCommissionHistory(ctx context.Context, in *GetCommissionHistoryRequest, opts ...grpc.CallOption) (*GetCommissionHistoryResponse, error)
	GetPayoutHistory(ctx context.Context, in *GetPayoutHistoryRequest, opts ...grpc.CallOption) (*GetPayoutHistoryResponse, error)
}

type analyticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsServiceClient(cc grpc.ClientConnInterface) AnalyticsServiceClient {
	return &analyticsServiceClient{cc}
}

func (c *analyticsServiceClient) TrackTransaction(ctx context.Context, in *TrackTransactionRequest, opts ...grpc.CallOption) (*TrackTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackTransactionResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_TrackTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GenerateBusinessReport(ctx context.Context, in *GenerateBusinessReportRequest, opts ...grpc.CallOption) (*GenerateBusinessReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateBusinessReportResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GenerateBusinessReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GenerateBusinessStats(ctx context.Context, in *GenerateBusinessStatsRequest, opts ...grpc.CallOption) (*GenerateBusinessStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateBusinessStatsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GenerateBusinessStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetCommissionHistory(ctx context.Context, in *GetCommissionHistoryRequest, opts ...grpc.CallOption) (*GetCommissionHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommissionHistoryResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetCommissionHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetPayoutHistory(ctx context.Context, in *GetPayoutHistoryRequest, opts ...grpc.CallOption) (*GetPayoutHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPayoutHistoryResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetPayoutHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyticsServiceServer is the server API for AnalyticsService service.
// All implementations must embed UnimplementedAnalyticsServiceServer
// for forward compatibility.
type AnalyticsServiceServer interface {
	TrackTransaction(context.Context, *TrackTransactionRequest) (*TrackTransactionResponse, error)
	GenerateBusinessReport(context.Context, *GenerateBusinessReportRequest) (*GenerateBusinessReportResponse, error)
	GenerateBusinessStats(context.Context, *GenerateBusinessStatsRequest) (*GenerateBusinessStatsResponse, error)
	GetCommissionHistory(context.Context, *GetCommissionHistoryRequest) (*GetCommissionHistoryResponse, error)
	GetPayoutHistory(context.Context, *GetPayoutHistoryRequest) (*GetPayoutHistoryResponse, error)
	mustEmbedUnimplementedAnalyticsServiceServer()
}

// UnimplementedAnalyticsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnalyticsServiceServer struct{}

func (UnimplementedAnalyticsServiceServer) TrackTransaction(context.Context, *TrackTransactionRequest) (*TrackTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackTransaction not implemented")
}
func (UnimplementedAnalyticsServiceServer) GenerateBusinessReport(context.Context, *GenerateBusinessReportRequest) (*GenerateBusinessReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateBusinessReport not implemented")
}
func (UnimplementedAnalyticsServiceServer) GenerateBusinessStats(context.Context, *GenerateBusinessStatsRequest) (*GenerateBusinessStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateBusinessStats not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetCommissionHistory(context.Context, *GetCommissionHistoryRequest) (*GetCommissionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommissionHistory not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetPayoutHistory(context.Context, *GetPayoutHistoryRequest) (*GetPayoutHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayoutHistory not implemented")
}
func (UnimplementedAnalyticsServiceServer) mustEmbedUnimplementedAnalyticsServiceServer() {}
func (UnimplementedAnalyticsServiceServer) testEmbeddedByValue()                          {}

// UnsafeAnalyticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyticsServiceServer will
// result in compilation errors.
type UnsafeAnalyticsServiceServer interface {
	mustEmbedUnimplementedAnalyticsServiceServer()
}

func RegisterAnalyticsServiceServer(s grpc.ServiceRegistrar, srv AnalyticsServiceServer) {
	// If the following call pancis, it indicates UnimplementedAnalyticsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AnalyticsService_ServiceDesc, srv)
}

func _AnalyticsService_TrackTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).TrackTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_TrackTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).TrackTransaction(ctx, req.(*TrackTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GenerateBusinessReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateBusinessReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GenerateBusinessReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GenerateBusinessReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GenerateBusinessReport(ctx, req.(*GenerateBusinessReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GenerateBusinessStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateBusinessStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GenerateBusinessStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GenerateBusinessStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GenerateBusinessStats(ctx, req.(*GenerateBusinessStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetCommissionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommissionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetCommissionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetCommissionHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetCommissionHistory(ctx, req.(*GetCommissionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetPayoutHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayoutHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetPayoutHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetPayoutHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetPayoutHistory(ctx, req.(*GetPayoutHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnalyticsService_ServiceDesc is the grpc.ServiceDesc for AnalyticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalyticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bank.v1.AnalyticsService",
	HandlerType: (*AnalyticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TrackTransaction",
			Handler:    _AnalyticsService_TrackTransaction_Handler,
		},
		{
			MethodName: "GenerateBusinessReport",
			Handler:    _AnalyticsService_GenerateBusinessReport_Handler,
		},
		{
			MethodName: "GenerateBusinessStats",
			Handler:    _AnalyticsService_GenerateBusinessStats_Handler,
		},
		{
			MethodName: "GetCommissionHistory",
			Handler:    _AnalyticsService_GetCommissionHistory_Handler,
		},
		{
			MethodName: "GetPayoutHistory",
			Handler:    _AnalyticsService_GetPayoutHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bank/v1/analytics.proto",
}
