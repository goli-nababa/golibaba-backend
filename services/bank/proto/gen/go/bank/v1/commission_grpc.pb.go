// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: bank/v1/commission.proto

package bankv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CommissionService_CalculateCommission_FullMethodName    = "/bank.v1.CommissionService/CalculateCommission"
	CommissionService_ProcessCommission_FullMethodName      = "/bank.v1.CommissionService/ProcessCommission"
	CommissionService_GetCommission_FullMethodName          = "/bank.v1.CommissionService/GetCommission"
	CommissionService_GetPendingCommissions_FullMethodName  = "/bank.v1.CommissionService/GetPendingCommissions"
	CommissionService_GetFailedCommissions_FullMethodName   = "/bank.v1.CommissionService/GetFailedCommissions"
	CommissionService_RetryFailedCommissions_FullMethodName = "/bank.v1.CommissionService/RetryFailedCommissions"
)

// CommissionServiceClient is the client API for CommissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommissionServiceClient interface {
	CalculateCommission(ctx context.Context, in *CalculateCommissionRequest, opts ...grpc.CallOption) (*CalculateCommissionResponse, error)
	ProcessCommission(ctx context.Context, in *ProcessCommissionRequest, opts ...grpc.CallOption) (*ProcessCommissionResponse, error)
	GetCommission(ctx context.Context, in *GetCommissionRequest, opts ...grpc.CallOption) (*GetCommissionResponse, error)
	GetPendingCommissions(ctx context.Context, in *GetPendingCommissionsRequest, opts ...grpc.CallOption) (*GetPendingCommissionsResponse, error)
	GetFailedCommissions(ctx context.Context, in *GetFailedCommissionsRequest, opts ...grpc.CallOption) (*GetFailedCommissionsResponse, error)
	RetryFailedCommissions(ctx context.Context, in *RetryFailedCommissionsRequest, opts ...grpc.CallOption) (*RetryFailedCommissionsResponse, error)
}

type commissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommissionServiceClient(cc grpc.ClientConnInterface) CommissionServiceClient {
	return &commissionServiceClient{cc}
}

func (c *commissionServiceClient) CalculateCommission(ctx context.Context, in *CalculateCommissionRequest, opts ...grpc.CallOption) (*CalculateCommissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateCommissionResponse)
	err := c.cc.Invoke(ctx, CommissionService_CalculateCommission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionServiceClient) ProcessCommission(ctx context.Context, in *ProcessCommissionRequest, opts ...grpc.CallOption) (*ProcessCommissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessCommissionResponse)
	err := c.cc.Invoke(ctx, CommissionService_ProcessCommission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionServiceClient) GetCommission(ctx context.Context, in *GetCommissionRequest, opts ...grpc.CallOption) (*GetCommissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommissionResponse)
	err := c.cc.Invoke(ctx, CommissionService_GetCommission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionServiceClient) GetPendingCommissions(ctx context.Context, in *GetPendingCommissionsRequest, opts ...grpc.CallOption) (*GetPendingCommissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPendingCommissionsResponse)
	err := c.cc.Invoke(ctx, CommissionService_GetPendingCommissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionServiceClient) GetFailedCommissions(ctx context.Context, in *GetFailedCommissionsRequest, opts ...grpc.CallOption) (*GetFailedCommissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFailedCommissionsResponse)
	err := c.cc.Invoke(ctx, CommissionService_GetFailedCommissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionServiceClient) RetryFailedCommissions(ctx context.Context, in *RetryFailedCommissionsRequest, opts ...grpc.CallOption) (*RetryFailedCommissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RetryFailedCommissionsResponse)
	err := c.cc.Invoke(ctx, CommissionService_RetryFailedCommissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommissionServiceServer is the server API for CommissionService service.
// All implementations must embed UnimplementedCommissionServiceServer
// for forward compatibility.
type CommissionServiceServer interface {
	CalculateCommission(context.Context, *CalculateCommissionRequest) (*CalculateCommissionResponse, error)
	ProcessCommission(context.Context, *ProcessCommissionRequest) (*ProcessCommissionResponse, error)
	GetCommission(context.Context, *GetCommissionRequest) (*GetCommissionResponse, error)
	GetPendingCommissions(context.Context, *GetPendingCommissionsRequest) (*GetPendingCommissionsResponse, error)
	GetFailedCommissions(context.Context, *GetFailedCommissionsRequest) (*GetFailedCommissionsResponse, error)
	RetryFailedCommissions(context.Context, *RetryFailedCommissionsRequest) (*RetryFailedCommissionsResponse, error)
	mustEmbedUnimplementedCommissionServiceServer()
}

// UnimplementedCommissionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommissionServiceServer struct{}

func (UnimplementedCommissionServiceServer) CalculateCommission(context.Context, *CalculateCommissionRequest) (*CalculateCommissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateCommission not implemented")
}
func (UnimplementedCommissionServiceServer) ProcessCommission(context.Context, *ProcessCommissionRequest) (*ProcessCommissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessCommission not implemented")
}
func (UnimplementedCommissionServiceServer) GetCommission(context.Context, *GetCommissionRequest) (*GetCommissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommission not implemented")
}
func (UnimplementedCommissionServiceServer) GetPendingCommissions(context.Context, *GetPendingCommissionsRequest) (*GetPendingCommissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingCommissions not implemented")
}
func (UnimplementedCommissionServiceServer) GetFailedCommissions(context.Context, *GetFailedCommissionsRequest) (*GetFailedCommissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFailedCommissions not implemented")
}
func (UnimplementedCommissionServiceServer) RetryFailedCommissions(context.Context, *RetryFailedCommissionsRequest) (*RetryFailedCommissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryFailedCommissions not implemented")
}
func (UnimplementedCommissionServiceServer) mustEmbedUnimplementedCommissionServiceServer() {}
func (UnimplementedCommissionServiceServer) testEmbeddedByValue()                           {}

// UnsafeCommissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommissionServiceServer will
// result in compilation errors.
type UnsafeCommissionServiceServer interface {
	mustEmbedUnimplementedCommissionServiceServer()
}

func RegisterCommissionServiceServer(s grpc.ServiceRegistrar, srv CommissionServiceServer) {
	// If the following call pancis, it indicates UnimplementedCommissionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CommissionService_ServiceDesc, srv)
}

func _CommissionService_CalculateCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServiceServer).CalculateCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommissionService_CalculateCommission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServiceServer).CalculateCommission(ctx, req.(*CalculateCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommissionService_ProcessCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServiceServer).ProcessCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommissionService_ProcessCommission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServiceServer).ProcessCommission(ctx, req.(*ProcessCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommissionService_GetCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServiceServer).GetCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommissionService_GetCommission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServiceServer).GetCommission(ctx, req.(*GetCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommissionService_GetPendingCommissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPendingCommissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServiceServer).GetPendingCommissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommissionService_GetPendingCommissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServiceServer).GetPendingCommissions(ctx, req.(*GetPendingCommissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommissionService_GetFailedCommissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFailedCommissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServiceServer).GetFailedCommissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommissionService_GetFailedCommissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServiceServer).GetFailedCommissions(ctx, req.(*GetFailedCommissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommissionService_RetryFailedCommissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryFailedCommissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServiceServer).RetryFailedCommissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommissionService_RetryFailedCommissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServiceServer).RetryFailedCommissions(ctx, req.(*RetryFailedCommissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommissionService_ServiceDesc is the grpc.ServiceDesc for CommissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bank.v1.CommissionService",
	HandlerType: (*CommissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateCommission",
			Handler:    _CommissionService_CalculateCommission_Handler,
		},
		{
			MethodName: "ProcessCommission",
			Handler:    _CommissionService_ProcessCommission_Handler,
		},
		{
			MethodName: "GetCommission",
			Handler:    _CommissionService_GetCommission_Handler,
		},
		{
			MethodName: "GetPendingCommissions",
			Handler:    _CommissionService_GetPendingCommissions_Handler,
		},
		{
			MethodName: "GetFailedCommissions",
			Handler:    _CommissionService_GetFailedCommissions_Handler,
		},
		{
			MethodName: "RetryFailedCommissions",
			Handler:    _CommissionService_RetryFailedCommissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bank/v1/commission.proto",
}
