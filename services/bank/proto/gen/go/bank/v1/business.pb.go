// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: bank/v1/business.proto

package bankv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BusinessWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BusinessId     uint64                 `protobuf:"varint,2,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	BusinessType   string                 `protobuf:"bytes,3,opt,name=business_type,json=businessType,proto3" json:"business_type,omitempty"`
	Balance        *Money                 `protobuf:"bytes,4,opt,name=balance,proto3" json:"balance,omitempty"`
	Status         string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	CommissionRate float64                `protobuf:"fixed64,6,opt,name=commission_rate,json=commissionRate,proto3" json:"commission_rate,omitempty"`
	PayoutSchedule string                 `protobuf:"bytes,7,opt,name=payout_schedule,json=payoutSchedule,proto3" json:"payout_schedule,omitempty"`
	LastPayoutDate *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_payout_date,json=lastPayoutDate,proto3" json:"last_payout_date,omitempty"`
	MinimumPayout  *Money                 `protobuf:"bytes,9,opt,name=minimum_payout,json=minimumPayout,proto3" json:"minimum_payout,omitempty"`
	BankInfo       *BankAccountInfo       `protobuf:"bytes,10,opt,name=bank_info,json=bankInfo,proto3" json:"bank_info,omitempty"`
}

func (x *BusinessWallet) Reset() {
	*x = BusinessWallet{}
	mi := &file_bank_v1_business_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BusinessWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessWallet) ProtoMessage() {}

func (x *BusinessWallet) ProtoReflect() protoreflect.Message {
	mi := &file_bank_v1_business_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessWallet.ProtoReflect.Descriptor instead.
func (*BusinessWallet) Descriptor() ([]byte, []int) {
	return file_bank_v1_business_proto_rawDescGZIP(), []int{0}
}

func (x *BusinessWallet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BusinessWallet) GetBusinessId() uint64 {
	if x != nil {
		return x.BusinessId
	}
	return 0
}

func (x *BusinessWallet) GetBusinessType() string {
	if x != nil {
		return x.BusinessType
	}
	return ""
}

func (x *BusinessWallet) GetBalance() *Money {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *BusinessWallet) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BusinessWallet) GetCommissionRate() float64 {
	if x != nil {
		return x.CommissionRate
	}
	return 0
}

func (x *BusinessWallet) GetPayoutSchedule() string {
	if x != nil {
		return x.PayoutSchedule
	}
	return ""
}

func (x *BusinessWallet) GetLastPayoutDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastPayoutDate
	}
	return nil
}

func (x *BusinessWallet) GetMinimumPayout() *Money {
	if x != nil {
		return x.MinimumPayout
	}
	return nil
}

func (x *BusinessWallet) GetBankInfo() *BankAccountInfo {
	if x != nil {
		return x.BankInfo
	}
	return nil
}

type CreateBusinessWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessId   uint64 `protobuf:"varint,1,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	BusinessType string `protobuf:"bytes,2,opt,name=business_type,json=businessType,proto3" json:"business_type,omitempty"`
	Currency     string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *CreateBusinessWalletRequest) Reset() {
	*x = CreateBusinessWalletRequest{}
	mi := &file_bank_v1_business_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBusinessWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessWalletRequest) ProtoMessage() {}

func (x *CreateBusinessWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bank_v1_business_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessWalletRequest.ProtoReflect.Descriptor instead.
func (*CreateBusinessWalletRequest) Descriptor() ([]byte, []int) {
	return file_bank_v1_business_proto_rawDescGZIP(), []int{1}
}

func (x *CreateBusinessWalletRequest) GetBusinessId() uint64 {
	if x != nil {
		return x.BusinessId
	}
	return 0
}

func (x *CreateBusinessWalletRequest) GetBusinessType() string {
	if x != nil {
		return x.BusinessType
	}
	return ""
}

func (x *CreateBusinessWalletRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type CreateBusinessWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wallet *BusinessWallet `protobuf:"bytes,1,opt,name=wallet,proto3" json:"wallet,omitempty"`
}

func (x *CreateBusinessWalletResponse) Reset() {
	*x = CreateBusinessWalletResponse{}
	mi := &file_bank_v1_business_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBusinessWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessWalletResponse) ProtoMessage() {}

func (x *CreateBusinessWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bank_v1_business_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessWalletResponse.ProtoReflect.Descriptor instead.
func (*CreateBusinessWalletResponse) Descriptor() ([]byte, []int) {
	return file_bank_v1_business_proto_rawDescGZIP(), []int{2}
}

func (x *CreateBusinessWalletResponse) GetWallet() *BusinessWallet {
	if x != nil {
		return x.Wallet
	}
	return nil
}

type GetBusinessWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *GetBusinessWalletRequest) Reset() {
	*x = GetBusinessWalletRequest{}
	mi := &file_bank_v1_business_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBusinessWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessWalletRequest) ProtoMessage() {}

func (x *GetBusinessWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bank_v1_business_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessWalletRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessWalletRequest) Descriptor() ([]byte, []int) {
	return file_bank_v1_business_proto_rawDescGZIP(), []int{3}
}

func (x *GetBusinessWalletRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type GetBusinessWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wallet *BusinessWallet `protobuf:"bytes,1,opt,name=wallet,proto3" json:"wallet,omitempty"`
}

func (x *GetBusinessWalletResponse) Reset() {
	*x = GetBusinessWalletResponse{}
	mi := &file_bank_v1_business_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBusinessWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessWalletResponse) ProtoMessage() {}

func (x *GetBusinessWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bank_v1_business_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessWalletResponse.ProtoReflect.Descriptor instead.
func (*GetBusinessWalletResponse) Descriptor() ([]byte, []int) {
	return file_bank_v1_business_proto_rawDescGZIP(), []int{4}
}

func (x *GetBusinessWalletResponse) GetWallet() *BusinessWallet {
	if x != nil {
		return x.Wallet
	}
	return nil
}

type UpdateBusinessWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wallet *BusinessWallet `protobuf:"bytes,1,opt,name=wallet,proto3" json:"wallet,omitempty"`
}

func (x *UpdateBusinessWalletRequest) Reset() {
	*x = UpdateBusinessWalletRequest{}
	mi := &file_bank_v1_business_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBusinessWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessWalletRequest) ProtoMessage() {}

func (x *UpdateBusinessWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bank_v1_business_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessWalletRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessWalletRequest) Descriptor() ([]byte, []int) {
	return file_bank_v1_business_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateBusinessWalletRequest) GetWallet() *BusinessWallet {
	if x != nil {
		return x.Wallet
	}
	return nil
}

type UpdateBusinessWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wallet *BusinessWallet `protobuf:"bytes,1,opt,name=wallet,proto3" json:"wallet,omitempty"`
}

func (x *UpdateBusinessWalletResponse) Reset() {
	*x = UpdateBusinessWalletResponse{}
	mi := &file_bank_v1_business_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBusinessWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessWalletResponse) ProtoMessage() {}

func (x *UpdateBusinessWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bank_v1_business_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessWalletResponse.ProtoReflect.Descriptor instead.
func (*UpdateBusinessWalletResponse) Descriptor() ([]byte, []int) {
	return file_bank_v1_business_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateBusinessWalletResponse) GetWallet() *BusinessWallet {
	if x != nil {
		return x.Wallet
	}
	return nil
}

type SetPayoutScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Schedule string `protobuf:"bytes,2,opt,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *SetPayoutScheduleRequest) Reset() {
	*x = SetPayoutScheduleRequest{}
	mi := &file_bank_v1_business_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPayoutScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPayoutScheduleRequest) ProtoMessage() {}

func (x *SetPayoutScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bank_v1_business_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPayoutScheduleRequest.ProtoReflect.Descriptor instead.
func (*SetPayoutScheduleRequest) Descriptor() ([]byte, []int) {
	return file_bank_v1_business_proto_rawDescGZIP(), []int{7}
}

func (x *SetPayoutScheduleRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *SetPayoutScheduleRequest) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

type SetPayoutScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *SetPayoutScheduleResponse) Reset() {
	*x = SetPayoutScheduleResponse{}
	mi := &file_bank_v1_business_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPayoutScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPayoutScheduleResponse) ProtoMessage() {}

func (x *SetPayoutScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bank_v1_business_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPayoutScheduleResponse.ProtoReflect.Descriptor instead.
func (*SetPayoutScheduleResponse) Descriptor() ([]byte, []int) {
	return file_bank_v1_business_proto_rawDescGZIP(), []int{8}
}

func (x *SetPayoutScheduleResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type RequestPayoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Amount   *Money `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *RequestPayoutRequest) Reset() {
	*x = RequestPayoutRequest{}
	mi := &file_bank_v1_business_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestPayoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestPayoutRequest) ProtoMessage() {}

func (x *RequestPayoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bank_v1_business_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestPayoutRequest.ProtoReflect.Descriptor instead.
func (*RequestPayoutRequest) Descriptor() ([]byte, []int) {
	return file_bank_v1_business_proto_rawDescGZIP(), []int{9}
}

func (x *RequestPayoutRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *RequestPayoutRequest) GetAmount() *Money {
	if x != nil {
		return x.Amount
	}
	return nil
}

type RequestPayoutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *RequestPayoutResponse) Reset() {
	*x = RequestPayoutResponse{}
	mi := &file_bank_v1_business_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestPayoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestPayoutResponse) ProtoMessage() {}

func (x *RequestPayoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bank_v1_business_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestPayoutResponse.ProtoReflect.Descriptor instead.
func (*RequestPayoutResponse) Descriptor() ([]byte, []int) {
	return file_bank_v1_business_proto_rawDescGZIP(), []int{10}
}

func (x *RequestPayoutResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetBusinessStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessId uint64                 `protobuf:"varint,1,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	StartDate  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (x *GetBusinessStatsRequest) Reset() {
	*x = GetBusinessStatsRequest{}
	mi := &file_bank_v1_business_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBusinessStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessStatsRequest) ProtoMessage() {}

func (x *GetBusinessStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bank_v1_business_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessStatsRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessStatsRequest) Descriptor() ([]byte, []int) {
	return file_bank_v1_business_proto_rawDescGZIP(), []int{11}
}

func (x *GetBusinessStatsRequest) GetBusinessId() uint64 {
	if x != nil {
		return x.BusinessId
	}
	return 0
}

func (x *GetBusinessStatsRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *GetBusinessStatsRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type GetBusinessStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats *BusinessStats `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *GetBusinessStatsResponse) Reset() {
	*x = GetBusinessStatsResponse{}
	mi := &file_bank_v1_business_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBusinessStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessStatsResponse) ProtoMessage() {}

func (x *GetBusinessStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bank_v1_business_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessStatsResponse.ProtoReflect.Descriptor instead.
func (*GetBusinessStatsResponse) Descriptor() ([]byte, []int) {
	return file_bank_v1_business_proto_rawDescGZIP(), []int{12}
}

func (x *GetBusinessStatsResponse) GetStats() *BusinessStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

var File_bank_v1_business_proto protoreflect.FileDescriptor

var file_bank_v1_business_proto_rawDesc = []byte{
	0x0a, 0x16, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x76,
	0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x14, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xae, 0x03, 0x0a, 0x0e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x28, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x0e, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x62, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x7f, 0x0a, 0x1b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x4f, 0x0a, 0x1c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22, 0x37, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x22, 0x4e, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2f, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x22, 0x4f, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x06, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x22, 0x53, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x35, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x5b, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x31, 0x0a, 0x15,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0xac, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x48,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x32, 0xbc, 0x04, 0x0a, 0x0f, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x12, 0x24, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a,
	0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x24, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e,
	0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12,
	0x1d, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x20, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x24, 0x5a, 0x22, 0x62, 0x61, 0x6e, 0x6b, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x62,
	0x61, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x61, 0x6e, 0x6b, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bank_v1_business_proto_rawDescOnce sync.Once
	file_bank_v1_business_proto_rawDescData = file_bank_v1_business_proto_rawDesc
)

func file_bank_v1_business_proto_rawDescGZIP() []byte {
	file_bank_v1_business_proto_rawDescOnce.Do(func() {
		file_bank_v1_business_proto_rawDescData = protoimpl.X.CompressGZIP(file_bank_v1_business_proto_rawDescData)
	})
	return file_bank_v1_business_proto_rawDescData
}

var file_bank_v1_business_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_bank_v1_business_proto_goTypes = []any{
	(*BusinessWallet)(nil),               // 0: bank.v1.BusinessWallet
	(*CreateBusinessWalletRequest)(nil),  // 1: bank.v1.CreateBusinessWalletRequest
	(*CreateBusinessWalletResponse)(nil), // 2: bank.v1.CreateBusinessWalletResponse
	(*GetBusinessWalletRequest)(nil),     // 3: bank.v1.GetBusinessWalletRequest
	(*GetBusinessWalletResponse)(nil),    // 4: bank.v1.GetBusinessWalletResponse
	(*UpdateBusinessWalletRequest)(nil),  // 5: bank.v1.UpdateBusinessWalletRequest
	(*UpdateBusinessWalletResponse)(nil), // 6: bank.v1.UpdateBusinessWalletResponse
	(*SetPayoutScheduleRequest)(nil),     // 7: bank.v1.SetPayoutScheduleRequest
	(*SetPayoutScheduleResponse)(nil),    // 8: bank.v1.SetPayoutScheduleResponse
	(*RequestPayoutRequest)(nil),         // 9: bank.v1.RequestPayoutRequest
	(*RequestPayoutResponse)(nil),        // 10: bank.v1.RequestPayoutResponse
	(*GetBusinessStatsRequest)(nil),      // 11: bank.v1.GetBusinessStatsRequest
	(*GetBusinessStatsResponse)(nil),     // 12: bank.v1.GetBusinessStatsResponse
	(*Money)(nil),                        // 13: bank.v1.Money
	(*timestamppb.Timestamp)(nil),        // 14: google.protobuf.Timestamp
	(*BankAccountInfo)(nil),              // 15: bank.v1.BankAccountInfo
	(*BusinessStats)(nil),                // 16: bank.v1.BusinessStats
}
var file_bank_v1_business_proto_depIdxs = []int32{
	13, // 0: bank.v1.BusinessWallet.balance:type_name -> bank.v1.Money
	14, // 1: bank.v1.BusinessWallet.last_payout_date:type_name -> google.protobuf.Timestamp
	13, // 2: bank.v1.BusinessWallet.minimum_payout:type_name -> bank.v1.Money
	15, // 3: bank.v1.BusinessWallet.bank_info:type_name -> bank.v1.BankAccountInfo
	0,  // 4: bank.v1.CreateBusinessWalletResponse.wallet:type_name -> bank.v1.BusinessWallet
	0,  // 5: bank.v1.GetBusinessWalletResponse.wallet:type_name -> bank.v1.BusinessWallet
	0,  // 6: bank.v1.UpdateBusinessWalletRequest.wallet:type_name -> bank.v1.BusinessWallet
	0,  // 7: bank.v1.UpdateBusinessWalletResponse.wallet:type_name -> bank.v1.BusinessWallet
	13, // 8: bank.v1.RequestPayoutRequest.amount:type_name -> bank.v1.Money
	14, // 9: bank.v1.GetBusinessStatsRequest.start_date:type_name -> google.protobuf.Timestamp
	14, // 10: bank.v1.GetBusinessStatsRequest.end_date:type_name -> google.protobuf.Timestamp
	16, // 11: bank.v1.GetBusinessStatsResponse.stats:type_name -> bank.v1.BusinessStats
	1,  // 12: bank.v1.BusinessService.CreateBusinessWallet:input_type -> bank.v1.CreateBusinessWalletRequest
	3,  // 13: bank.v1.BusinessService.GetBusinessWallet:input_type -> bank.v1.GetBusinessWalletRequest
	5,  // 14: bank.v1.BusinessService.UpdateBusinessWallet:input_type -> bank.v1.UpdateBusinessWalletRequest
	7,  // 15: bank.v1.BusinessService.SetPayoutSchedule:input_type -> bank.v1.SetPayoutScheduleRequest
	9,  // 16: bank.v1.BusinessService.RequestPayout:input_type -> bank.v1.RequestPayoutRequest
	11, // 17: bank.v1.BusinessService.GetBusinessStats:input_type -> bank.v1.GetBusinessStatsRequest
	2,  // 18: bank.v1.BusinessService.CreateBusinessWallet:output_type -> bank.v1.CreateBusinessWalletResponse
	4,  // 19: bank.v1.BusinessService.GetBusinessWallet:output_type -> bank.v1.GetBusinessWalletResponse
	6,  // 20: bank.v1.BusinessService.UpdateBusinessWallet:output_type -> bank.v1.UpdateBusinessWalletResponse
	8,  // 21: bank.v1.BusinessService.SetPayoutSchedule:output_type -> bank.v1.SetPayoutScheduleResponse
	10, // 22: bank.v1.BusinessService.RequestPayout:output_type -> bank.v1.RequestPayoutResponse
	12, // 23: bank.v1.BusinessService.GetBusinessStats:output_type -> bank.v1.GetBusinessStatsResponse
	18, // [18:24] is the sub-list for method output_type
	12, // [12:18] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_bank_v1_business_proto_init() }
func file_bank_v1_business_proto_init() {
	if File_bank_v1_business_proto != nil {
		return
	}
	file_bank_v1_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bank_v1_business_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bank_v1_business_proto_goTypes,
		DependencyIndexes: file_bank_v1_business_proto_depIdxs,
		MessageInfos:      file_bank_v1_business_proto_msgTypes,
	}.Build()
	File_bank_v1_business_proto = out.File
	file_bank_v1_business_proto_rawDesc = nil
	file_bank_v1_business_proto_goTypes = nil
	file_bank_v1_business_proto_depIdxs = nil
}
